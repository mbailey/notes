#!/usr/bin/env bash
set -eu -o pipefail

# Install Linux on kvm via CLI
#
# - Create a small Copy on Write (COW) file backed by the linux qcow2 image.
# - The backing linux image is readonly and will never be modified.

# - [Run Amazon Linux 2 as a virtual machine on premises (docs.aws.amazon.com)](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/amazon-linux-2-virtual-machine.html#amazon-linux-2-virtual-machine-download)
# - [QEMU  KVM Using the Copy-On-Write mode (www.unixmen.com)](https://www.unixmen.com/qemu-kvm-using-copy-write-mode/)

function usage() {
  echo >&2 "Usage: $0 GUEST_NAME [GUEST_TYPE] # amzn2, fedora, ubuntu"
}

GUEST_NAME="${1:-}"
[[ -z $GUEST_NAME ]] && usage && exit 1

GUEST_TYPE=${2:-amzn2}

case $GUEST_TYPE in
  amzn2)
    IMAGE_URL='https://cdn.amazonlinux.com/os-images/2.0.20221004.0/kvm/amzn2-kvm-2.0.20221004.0-x86_64.xfs.gpt.qcow2'
    ;;
  fedora-36 | fedora36 | f36 | fedora)
    IMAGE_URL='https://download.fedoraproject.org/pub/fedora/linux/releases/36/Cloud/x86_64/images/Fedora-Cloud-Base-36-1.5.x86_64.qcow2'
    ;;
  rocky-9 | rock9 | r9 | rocky)
    IMAGE_URL='https://download.rockylinux.org/pub/rocky/9.0/images/x86_64/Rocky-9-GenericCloud.latest.x86_64.qcow2'
    ;;
  rocky-8 | rocky8 | r8)
    IMAGE_URL='https://dl.rockylinux.org/pub/rocky/8.6/images/Rocky-8-GenericCloud.latest.x86_64.qcow2'
    ;;
  # XXX It's not liking our config/meta-data 
  # ubuntu-22.04 | ubuntu)
  #   IMAGE_URL='https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64-disk-kvm.img'
  # ubuntu-20.04 | ubuntu)
  #  IMAGE_URL='https://cloud-images.ubuntu.com/focal/current/focal-server-cloudimg-amd64-disk-kvm.img'
  #  ;;
  *)
    echo "Unknown image: $GUEST_TYPE"
    exit 1
    ;;
esac

function command_exists() {
    # check if command exists and fail otherwise
    local exit_code=0
    if ! type "$1" &>/dev/null; then
      echo "$1 could not be found."
      exit_code=1
    fi
    return $exit_code
}

function check_deps() {
  for COMMAND in \
    genisoimage \
    qemu-img \
    virsh \
    virt-install
  do
    command_exists "${COMMAND}"
  done
}

check_deps

# Set to default if unset
: ${LIBVIRT_IMAGES_DIR:=/var/lib/libvirt/images}
IMAGE_FILENAME="$(basename "$IMAGE_URL")"

# Update hostname in `meta-data` file
sed "s/CHANGEME/$GUEST_NAME/" config/meta-data-template > config/meta-data

SEED_ISO_FILENAME="${LIBVIRT_IMAGES_DIR}/seed-${GUEST_NAME}.iso"

# Create seed.iso boot image (cloud-init and user-data)
genisoimage                      \
  -output "${SEED_ISO_FILENAME}" \
  -volid cidata                  \
  -joliet                        \
  -rock                          \
  config/user-data               \
  config/meta-data

# Get KVM disk image
cd "$LIBVIRT_IMAGES_DIR"
wget --no-clobber "$IMAGE_URL"
chmod a-w "$(basename "$IMAGE_URL")"
cd -

# TODO Verify downloaded image using signed checksums

# Delete existing kvm guest with same name
virsh destroy "${GUEST_NAME}" || :
virsh undefine "${GUEST_NAME}" || :

cd "$LIBVIRT_IMAGES_DIR"
# Create a layer backed back the amazon linux image
qemu-img create                     \
    -f qcow2                        \
    -b "$IMAGE_FILENAME"     \
    -F qcow2                        \
    "${GUEST_NAME}.qcow2"

# Print defaults about newly created image
qemu-img info --backing-chain "${GUEST_NAME}.qcow2"
cd -

# Create a KVM guest based on the image and cloud-init config 
virt-install \
  --console pty,target_type=serial \
  --description "Amazon Linux 2 Copy on Write (COW)" \
  --disk path="/var/lib/libvirt/images/${GUEST_NAME}.qcow2",bus=virtio,size=10 \
  --disk path="${SEED_ISO_FILENAME}",device=cdrom \
  --import \
  --name "${GUEST_NAME}" \
  --network bridge:virbr0,model=virtio \
  --os-variant=rhel7.0 \
  --ram=2048 \
  --vcpus=2 \
  --noautoconsole

## Connect
[[ -t 1 ]] && virsh console "${GUEST_NAME}"

# Print networking info
#
# virsh net-dhcp-leases default
#  Expiry Time           MAC address         Protocol   IP address           Hostname   Client ID or DUID
# ------------------------------------------------------------------------------------------------------------------------------------------------
# 2020-09-12 14:50:17   52:54:00:e5:0e:65   ipv4       192.168.122.103/24   hal9000
#
# ssh ec2-user@192.168.122.103

# TODO Verify downloaded image using signed checksums
#
# amazon-linux-2
#
# wget https://cdn.amazonlinux.com/os-images/2.0.20190612/kvm/SHA256SUMS
# wget https://cdn.amazonlinux.com/os-images/2.0.20190612/kvm/SHA256SUMS.gpg
# sha256sum --check SHA256SUMS
# gpg --verify SHA256SUMS.gpg SHA256SUMS
#
# Verify downloaded image using signed checksums
# https://alt.fedoraproject.org/en/verify.html
#
# fedora
#
# curl https://getfedora.org/static/fedora.gpg | gpg --import
# wget https://getfedora.org/static/checksums/36/images/Fedora-Cloud-36-1.5-x86_64-CHECKSUM
# gpg --verify-files *-CHECKSUM
# sha256sum -c *-CHECKSUM
